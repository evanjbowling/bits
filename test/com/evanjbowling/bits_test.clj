(ns com.evanjbowling.bits-test
  (:require
   [clojure.test          :refer [deftest is are]]
   [com.evanjbowling.bits :as b]))

(deftest test-char-bits
  (are [c expected] (= expected (b/char-bits c))
    "a"    '(0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1)
    "b"    '(0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0)
    "c"    '(0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1)
    "1"    '(0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1)
    "2"    '(0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0)
    "3"    '(0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 1)
    "‚Å∑"    '(0 0 1 0 0 0 0 0 0 1 1 1 0 1 1 1)))

(deftest test-short-bits
  (are [s expected] (= expected (b/short-bits s))
    Short/MAX_VALUE '(0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
    Short/MIN_VALUE '(1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    "0"             '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    "255"           '(0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1)
    "-255"          '(1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1)))

(deftest test-int-bits
  (are [i expected] (= expected (b/int-bits i))
    Integer/MAX_VALUE '(0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
    Integer/MIN_VALUE '(1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    "0"               '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    "255"             '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1)
    "-255"            '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1)))

(deftest test-long-bits
  (are [l expected] (= expected (b/long-bits l))
    Long/MAX_VALUE    '(0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                          1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
    Long/MIN_VALUE    '(1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
                          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    "0"               '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
                          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    "255"             '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
                          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1)
    "-255"            '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                          1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1)))

(deftest test-float-bits
  (are [f expected] (= expected (b/float-bits f))
    Float/MAX_VALUE '([0] [1 1 1 1 1 1 1 0] [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]);; 3.4028235E38
    Float/MIN_VALUE '([0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]) ;; 1.4E-45
    "0.5"           '([0] [0 1 1 1 1 1 1 0] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
    "0.25"          '([0] [0 1 1 1 1 1 0 1] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
    "0.1"           '([0] [0 1 1 1 1 0 1 1] [1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 1])
    "9"             '([0] [1 0 0 0 0 0 1 0] [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])))

;; TODO: test-float-map
;; TODO: test-double-bits
;; TODO: test-double-map
